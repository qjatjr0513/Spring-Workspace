<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	<!-- @Controller , @Service, @Repository.. , @Component 어노테이션을 활성화 해주는 설정. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- 
		주소 자동 완성 도구
		매번 같은 주소 (/WEB-INF/views/ )를 추가해야하기 때문에 자동완성이 기본적으로 등록되어있음.
		- view resolver 라는 도구를 등록(spring제공)
		- class : InternalResourceViewResolver의 풀 클래스명
		- prefix : 접두어/ suffix : 접미어
		- return할 파일명을 제시하는 부분에 접두어, 접미어를 붙여서 요청하겠다.
	 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		base-package에 등록된 패키지와 그 하위 패키지까지 모두 감시해서 등록가능한 도구(클래스) (component)를 모두 찾아서 등록시키겠다.
	 -->
	<context:component-scan base-package="com.kh.spring" />
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
<!-- 	</context:component-scan> -->
	
	
	 <!-- 
	    	Interceptor : 디스패쳐서블릿이 컨트롤러에 요청을 넣을때 전(preHandle)/후(postHandle)로 나눠서 해당 인터셉터가 중간에 요청을 가로채게됨.
	    	스프링의 모든 빈객체에 접근이 가능하며, 보통 로그인 체크, 권한체크, 프로그램 실행시간이나 로그 확인등에 사용됨.
	     -->
	     <mvc:interceptors>
	     	<!-- 로깅용 인터셉터 등록 -->
	     	<mvc:interceptor>
	     		<mvc:mapping path="/**"/>
	     			<beans:bean class="com.kh.spring.common.interceptor.BoardTypeInterceptor"/>
<!-- 	     		<beans:bean class="com.kh.spring.common.LoggingInterceptor"/>	 -->
	     	</mvc:interceptor>
	     	
	     	<!-- 사용자 로그인체크 && 사용자 권한체크 -->
	     	<mvc:interceptor>
	     		<mvc:mapping path="/*.me"/>
	     		<mvc:mapping path="/**/*.bo"/>
	     		<mvc:mapping path="/**/*.ad"/>
	     		<mvc:exclude-mapping path="/login.me"/>
	     		<mvc:exclude-mapping path="/enrollForm.me"/>
	     		<mvc:exclude-mapping path="/insert.me"/>
	     		<beans:bean class="com.kh.spring.common.AccessValidator"/>	
	     	</mvc:interceptor>
	     	
	     	
	     </mvc:interceptors>
	     
	<!-- 
		사용자가 어떤 URL로 요청시 문서가 읽혀지는지
		
		HandlerMapping을 통해서 어떤 url로 요청을했을때 어떤 controller을 구동시킬것인지 알아내야한다.(*해당 컨트롤러가 실행되도록.)
		
		1. 요청때마다 실행될 controller 클래스들을 bean으로 등록해두기
		<beans:bean class="class.kh.spring.member.LoginController" id="loginController"/>
		<beans:bean class="class.kh.spring.member.EnrollController" id="enrollController"/>
		..(등록할 컨트롤러 갯수만큼 bean등록)
		
		2. 어떤 url로 요청들어온것을 처리할것인지 매핑시켜줘야한다.
		<beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
			<bean:property name="mappings">
			<bean:prop key="login.me">loginController</beans:bean>
			<bean:prop key="insert.me">enrollController</beans:bean>
			</bean:property>
		</beans:bean>
		
	 -->
	 
	 <!-- 
	 	위에 작성한 방식 xml로 빈을 등록하는 방식
	 	-장점 : xml문서 내에서 한눈에 볼수있기 때문에 관리의 편의성이 높음
	 	- 단점 : bean 개수가 많아지면 관리가 더 어려워진다. 또한 여러 개발자가 같은 xml파일을 수정하면 충돌이 발생할수 있음.
	 	
	 	*어노테이션 방식
	 	-component-scan에서 지정한 패키지명(base-package)하위의 모든 클래스를 스캔하여
	 	@Controller과 같은 MVC어노테이션이 붙은 클래스를 자동으로 bean으로 등록해주는 방식
	 	@Service
	 	@Repository
	 	@Componrnt...
	 	
	 	단 내가 직접 만든 클래스가 아닐경우(spring에서 제공하는 클래스거나 컴파일된 class일 경우)
	 	소스코드 내부를 직접볼수가 없고, 수정도 불가능하기 때문에 코드상 어노테이션을 붙일수가 없음.
	 	따라서 이경우에는 위의 xml방식으로 bean을 등록해줘야한다.
	  -->
	
	<aop:aspectj-autoproxy proxy-target-class="false" />
	<!-- 
		proxy-target-class : 프록시 객체 생성시 interface or class로 프록시 객체 생성할지를 정하는 구문
		기본값 : true. -> 프록시 객체를 생성시 클래스로 만들어줌.
		일반적으로 프록시 객체는 자바에서 기본적으로 제공하는 다이나믹 프록시 interface으로 생성함.
		클래스로 만들게 되면 cglib라이브러리를 이용해서 프록시 객체를 생성함.(이슈가 있음)
		
		내가 만든 공통 모듈, 코드를 aop로 적용시킬지, interseptor로 적용시킬지 고민이 된다면, 
		각각의 특징을 고려하여 적용시키면됨.
		
		1. Interceptor는 dispatcherServlet이 controller를 호출하기 전/후로 끼어들기 때문에
		controller에 전달하기 전인 Request와 response의 데이터를 처리하기에 좋으며, Application전역에 사용하는 객체에 대한 설정을 하기에 용이하다.
		
		2. aop는 주로 트랜잭션처리(@Transactional), 로깅처리 등 비즈니스단의 메서드에서 더 "세밀하게" 조정하고싶을때 사용하면 됨.
		
		종합해보면 컨트롤러에 공통적으로 적용할 부가기능이면? 핸들러 인터셉터(interceptor)를 이용하는 편이 났다.
		"세밀하게" 조정하고 싶은 기능이라면? Spring AOP를 이용하는 편이 낫다.
		
		스프링 요청 / 응답 흐름.
		요청 -> Filter -> DispatcherServlet(HanglerMapping) -> Interceptor -> Controller -> AOP -> Service -> DAO
																											  |
																											  DB
																											  |
		응답 <- Filter <- DispatcherServlet(ViewResolver) <- Interceptor	<- Controller <- AOP <-  Service  <-  DAO
		
	 -->
	 <!-- 
	 	트랜잭션 처리 시 @Transactional 어노테이션 사용해야함.
	 	
	 	@Transactional : 클래스 혹은 메서드 수행 후에 트랜잭션(commit, rollback)를 하라고 알려주는 어노테이션
	 	
	  -->
	 <tx:annotation-driven transaction-manager="transactionManager"/>
	 
	 
	 <!-- webSocket 요청시 핸들러 클래스와 연결하기 -->
	<beans:bean id="chatHandler" class="com.kh.spring.chat.model.websocket.ChatWebsocketHandler"/>
	
	<websocket:handlers>
		
		<!-- 웹소켓 요청(주소)를 처리한 bean 지정 -->
		<websocket:mapping handler="chatHandler" path="/chat"/>
		
		<websocket:handshake-interceptors>
			<!-- 
				interceptor : http통신에서 request와 response를 가로채는 역할.
				
				handshake-interceptors : 
				요청 관련 데이터중 httpSession(로그인 정보, 채팅방 번호)을 가로채서
				webSocketSession에게 넣어줌.
			 -->
			 
			 <beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
			
		</websocket:handshake-interceptors>
		
		<!-- SocketJS 라이브러리를 이용해서 만들어진 웹소켓 객체임을 의미. -->
		<websocket:sockjs />
	</websocket:handlers>
	
</beans:beans>
