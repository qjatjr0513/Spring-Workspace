<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan base-package="com.kh.spring">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<mvc:annotation-driven>
	</mvc:annotation-driven>
	<!-- 
		root-context.xml
		서버 구동과 동시에 web.xml파일을 거쳐서 바로 로딩되는 문서.
		- 보통 서버구동과 동시에 세팅해야하는 내용들을 작성함.(db연결 or 트랜잭션 처리)
	 -->
	 
	 <!-- DB연결 설정 3단계 -->
	 <!-- 1단계 DB연결을 위한 도구 설정. -->
	 <bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
	 	<!-- 어느 db연결할것인지 지정 -->
	 	<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
	 	<property name="url" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"/>
	 	<property name="username" value="SPRING"/>
	 	<property name="password" value="SPRING" />
	 </bean>
	 
	 <!-- 
	 	객체가 필요할때 실행되는 코드
	 	BasicDataSource datasource = new BasicDataSource();
	 	datasource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
	 	datasource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
	 	...
	 	
	  -->
	  
	  <!-- 2단계 MyBatis Spring에서 제공하는 sql명령어 실행을 위한 도구 등록 -->
	  <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
	  	 <!-- mybatis 설정파일 위치를 지정. (src/main/resources) -->
	  	 <property name="configLocation" value="classpath:mybatis-config.xml"/> <!-- classpath : resources -->
	  	 <!-- 연결을 위한 도구 -->
	  	 <property name="dataSource" ref="dataSource"/>
	  </bean>
	  
	  <!-- 
	  	  내부적으로 객체를 필요로할때 실행되는 코드
	  	  SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
	  	  sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
	  	  sqlSessionFactory.dataSource(dataSource);
	  	  ...
	   -->
	   
	   <!-- 3단계 SQL구문 실행을 위한 템플릿을 제공하는 도구 등록 -->
	   <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
	   		<!-- Sql 명령어 실행을 위한 도구에 대한 참조 -->
	   		<constructor-arg ref="sqlSessionFactory" />
	   </bean>
	   
	   <!-- 
	   		SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory);
	    -->
	    
	    <!-- 
	    	property => setter를 통해 주입
	    	constructor-arg => 생성자를 통해 주입
	    	
	     -->
	     
	     <!-- 스프링에서 사용하는 proxy를 이용한 트랜잭션제어가 안먹힐 경우 트랜잭션 매니저를 추가해서 문제해결 -->
	     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	     	<property name="dataSource" ref="dataSource"></property>
	     </bean>
	    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
	    	
	    	<!-- defaultEncoding : 업로드 되는 파일에 대한 인코딩처리를 어떻게 할것인지 여부 -->
	    	<property name="defaultEncoding" value="UTF-8"/>
	    	
	    	<!-- 
	    		maxUploadSize : 한번에 전체 업로드 되는 파일의 총 용량 설정.
	    		
	    		maxInMemorySize(maxUploadSizePerFile) : 디스크에 임시파일을 생성하기전에 메모리에 보관할수있는 최대바이트 크기.
	    	 -->
	    	 <property name="maxUploadSize" value="10000000"/>
	    	 <property name="maxInMemorySize" value="10000000"/>
	    	 

	    </bean>
</beans>
